from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
import sqlite3
import logging

# =========================
# BOT SETTINGS
# =========================
TOKEN = "8262325261:AAE9AZxLY_GEPN-Bqn32iqofdoQ5xtfSP9A"
ADMIN_ID = 8190068599   # admin chat id

# =========================
# LOGGING
# =========================
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# =========================
# DATABASE CREATE
# =========================
DB_FILE = "users.db"
conn = sqlite3.connect(DB_FILE)
c = conn.cursor()
c.execute("""CREATE TABLE IF NOT EXISTS users (
    chat_id INTEGER PRIMARY KEY,
    utr TEXT,
    name TEXT,
    whatsapp TEXT,
    screenshot TEXT,
    status TEXT
)""")
conn.commit()
conn.close()

# =========================
# STATES
# =========================
ASK_SCREENSHOT, ASK_UTR, ASK_NAME, ASK_WHATSAPP = range(4)

# =========================
# START COMMAND
# =========================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üôè ‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç!\n\n‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡±Å‡∞Ç‡∞¶‡±Å‡∞ó‡∞æ ‡∞Æ‡±Ä *‡∞™‡±á‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç ‡∞∏‡±ç‡∞ï‡±ç‡∞∞‡±Ä‡∞®‡±ç‚Äå‡∞∑‡∞æ‡∞ü‡±ç* ‡∞™‡∞Ç‡∞™‡∞Ç‡∞°‡∞ø.")
    return ASK_SCREENSHOT

# =========================
# STEP 1 - SCREENSHOT
# =========================
async def ask_screenshot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:
        await update.message.reply_text("‚ùå ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø *‡∞∏‡±ç‡∞ï‡±ç‡∞∞‡±Ä‡∞®‡±ç‚Äå‡∞∑‡∞æ‡∞ü‡±ç ‡∞´‡±ã‡∞ü‡±ã* ‡∞Æ‡∞æ‡∞§‡±ç‡∞∞‡∞Æ‡±á ‡∞™‡∞Ç‡∞™‡∞Ç‡∞°‡∞ø.")
        return ASK_SCREENSHOT

    file_id = update.message.photo[-1].file_id
    context.user_data["screenshot"] = file_id
    context.user_data["chat_id"] = update.message.chat_id
    context.user_data["username"] = update.message.from_user.username
    context.user_data["firstname"] = update.message.from_user.first_name

    await update.message.reply_text("‚úÖ Screenshot ‡∞µ‡∞ö‡±ç‡∞ö‡∞ø‡∞Ç‡∞¶‡∞ø.\n\n‡∞á‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞Æ‡±Ä *12 ‡∞Ö‡∞Ç‡∞ï‡±Ü‡∞≤ UTR ‡∞®‡∞Ç‡∞¨‡∞∞‡±ç* ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø.")
    return ASK_UTR

# =========================
# STEP 2 - UTR
# =========================
async def ask_utr(update: Update, context: ContextTypes.DEFAULT_TYPE):
    utr = update.message.text.strip()
    if not utr.isdigit() or len(utr) != 12:
        await update.message.reply_text("‚ùå ‡∞∏‡∞∞‡±à‡∞® *12 ‡∞Ö‡∞Ç‡∞ï‡±Ü‡∞≤ UTR ‡∞®‡∞Ç‡∞¨‡∞∞‡±ç* ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø.")
        return ASK_UTR

    context.user_data["utr"] = utr
    await update.message.reply_text("‚úÖ UTR ‡∞µ‡∞ö‡±ç‡∞ö‡∞ø‡∞Ç‡∞¶‡∞ø.\n\n‡∞á‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞Æ‡±Ä *‡∞¨‡±ç‡∞Ø‡∞æ‡∞Ç‡∞ï‡±ç ‡∞π‡±ã‡∞≤‡±ç‡∞°‡∞∞‡±ç ‡∞™‡±á‡∞∞‡±Å* ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø.")
    return ASK_NAME

# =========================
# STEP 3 - NAME
# =========================
async def ask_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    context.user_data["name"] = name

    await update.message.reply_text("‚úÖ ‡∞™‡±á‡∞∞‡±Å ‡∞µ‡∞ö‡±ç‡∞ö‡∞ø‡∞Ç‡∞¶‡∞ø.\n\n‡∞á‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å ‡∞Æ‡±Ä *10 ‡∞Ö‡∞Ç‡∞ï‡±Ü‡∞≤ WhatsApp ‡∞®‡∞Ç‡∞¨‡∞∞‡±ç* ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø.")
    return ASK_WHATSAPP

# =========================
# STEP 4 - WHATSAPP
# =========================
async def ask_whatsapp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    whatsapp = update.message.text.strip()
    if not whatsapp.isdigit() or len(whatsapp) != 10:
        await update.message.reply_text("‚ùå *10 ‡∞Ö‡∞Ç‡∞ï‡±Ü‡∞≤ WhatsApp ‡∞®‡∞Ç‡∞¨‡∞∞‡±ç* ‡∞á‡∞µ‡±ç‡∞µ‡∞Ç‡∞°‡∞ø.")
        return ASK_WHATSAPP

    context.user_data["whatsapp"] = whatsapp

    # ‡∞°‡±á‡∞ü‡∞æ‡∞¨‡±á‡∞∏‡±ç ‡∞≤‡±ã ‡∞∏‡±á‡∞µ‡±ç ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç
    conn = sqlite3.connect(DB_FILE)
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO users (chat_id, utr, name, whatsapp, screenshot, status) VALUES (?,?,?,?,?,?)",
              (context.user_data["chat_id"],
               context.user_data["utr"],
               context.user_data["name"],
               whatsapp,
               context.user_data["screenshot"],
               "pending"))
    conn.commit()
    conn.close()

    # ADMIN ‡∞ï‡∞ø ‡∞™‡∞Ç‡∞™‡∞°‡∞Ç
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ Approve", callback_data=f"approve_{context.user_data['chat_id']}"),
            InlineKeyboardButton("‚ùå Reject", callback_data=f"reject_{context.user_data['chat_id']}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    username = context.user_data.get("username", "N/A")
    firstname = context.user_data.get("firstname", "N/A")

    await context.bot.send_photo(
        chat_id=ADMIN_ID,
        photo=context.user_data["screenshot"],
        caption=(
            f"üîî ‡∞ï‡±ä‡∞§‡±ç‡∞§ ‡∞∏‡∞¨‡±ç‡∞Æ‡∞ø‡∞∑‡∞®‡±ç ‡∞µ‡∞ö‡±ç‡∞ö‡∞ø‡∞Ç‡∞¶‡∞ø:\n\n"
            f"üë§ ‡∞™‡±á‡∞∞‡±Å: {context.user_data['name']}\n"
            f"üí∞ UTR: {context.user_data['utr']}\n"
            f"üè¶ ‡∞¨‡±ç‡∞Ø‡∞æ‡∞Ç‡∞ï‡±ç ‡∞π‡±ã‡∞≤‡±ç‡∞°‡∞∞‡±ç: {context.user_data['name']}\n"
            f"üì± WhatsApp: {whatsapp}\n\n"
            f"üìå User: @{username}\n"
            f"üÜî Chat ID: {context.user_data['chat_id']}\n"
            f"üë§ First Name: {firstname}"
        ),
        reply_markup=reply_markup
    )

    await update.message.reply_text("‚úÖ ‡∞Æ‡±Ä ‡∞∏‡∞¨‡±ç‡∞Æ‡∞ø‡∞∑‡∞®‡±ç ‡∞Ö‡∞°‡±ç‡∞Æ‡∞ø‡∞®‡±ç ‡∞ï‡∞ø ‡∞™‡∞Ç‡∞™‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø.\n‚è≥ ‡∞µ‡±Ü‡∞∞‡∞ø‡∞´‡±à ‡∞Ö‡∞Ø‡∞ø‡∞® ‡∞§‡∞∞‡±Å‡∞µ‡∞æ‡∞§ ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞Æ‡±Ü‡∞∏‡±á‡∞ú‡±ç ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞Ç‡∞¶‡∞ø.")
    return ConversationHandler.END

# =========================
# ADMIN APPROVE / REJECT
# =========================
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("approve_"):
        chat_id = int(data.split("_")[1])
        await context.bot.send_message(chat_id, "‚úÖ ‡∞Æ‡±Ä ‡∞∏‡∞¨‡±ç‡∞Æ‡∞ø‡∞∑‡∞®‡±ç *‡∞Ö‡∞™‡±ç‡∞∞‡±Ç‡∞µ‡±ç* ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø!")
        await query.edit_message_caption(query.message.caption + "\n\n‚úÖ Approved by Admin")

    elif data.startswith("reject_"):
        chat_id = int(data.split("_")[1])
        await context.bot.send_message(chat_id, "‚ùå ‡∞Æ‡±Ä ‡∞∏‡∞¨‡±ç‡∞Æ‡∞ø‡∞∑‡∞®‡±ç *‡∞∞‡∞ø‡∞ú‡±Ü‡∞ï‡±ç‡∞ü‡±ç* ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø.")
        await query.edit_message_caption(query.message.caption + "\n\n‚ùå Rejected by Admin")

# =========================
# MAIN
# =========================
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_SCREENSHOT: [MessageHandler(filters.PHOTO, ask_screenshot)],
            ASK_UTR: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_utr)],
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_name)],
            ASK_WHATSAPP: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_whatsapp)],
        },
        fallbacks=[]
    )

    app.add_handler(conv_handler)
    app.add_handler(CallbackQueryHandler(button))

    print("ü§ñ Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
